function test()
	{
		//reverseString('Subscribers rock');
		
		//findMinValue([3, 5, 7, 20, .18, 01, -1.1, 12, Infinity, Infinity, 0.18, -1.1, 12]);
		
		//findDistinctValues([3, 5, 7, 20, .18, 01, -1.1, 12, Infinity, Infinity, 0.18, -1.1, 12]);
		
		//doFizzBuzz();
		
		//removeFruits(['apple', 'banana', 'orange', 'kiwi', 'pear', 'plum', 'strawberry'],['pear', 'banana']);
		
		//pushOntoArray([1,2,3,4,5],6);
		
		//pushOntoArray([1,2,3,4,5],[6,7,8,9,10]);
		
		//splitListStrUsingComma('The, quick, brown, fox jumped over');
		
		//splitListStrUsingComma('');
		
		//sum(1, 1, 2, 3, 5, 7);
		
		//isOnlyWhitespace("      ");
		
		//alert(JSONObj.people[0].phonenumbers[1]);
		
		//AddItemstoList();
		
		//DoThisChecksandLinks();
		
		//DoThisSelect();
		
		//var bar = foo(2); // bar is now a closure.
		//bar(10); //Closure
		
		
		/*RowCol.addColumns('column1', 'column2', 'column3');
		RowCol.addRows('value1A', 'value1B', 'value1C');
		RowCol.addRows('value2A', 'value2B', 'value2C');
		jsondata = RowCol.getData());
		alert(jsondata);*/
		
	 
	}

     // Example unit test function
     function divide( a, b ) {
        return a / b;
     }

     // Write a function that takes a single argument (a string) and returns the string reversed.
     function reverseString(str) {
         str1 = str;
		 str = "";
		 lengthofstring = str1.length;
		 for(i =0; i< lengthofstring;i++)
		 	str = str + str1[lengthofstring - i - 1];
		 return str;
     }

     // Write a function that takes an array of numbers and returns the minimum value
     function findMinValue(values) {
         try{
			minval = values[0];
			for(i = 0 ;i<values.length;i++)
				if(values[i] < minval)
					minval = values[i];
			return minval;
		 }
		 catch(err){}
     }

     // Write a function that takes an array and returns the distinct values only (i.e. removes duplicates)
     function findDistinctValues(values) {
         try{
			var distinctvalues = new Array();
			for(i = 0 ;i<values.length;i++)
			{
				for(j = 0;j<distinctvalues.length;j++)
					if(distinctvalues[j] == values[i])
						break;
				if(j == distinctvalues.length)
					distinctvalues.push(values[i]);
			}
			return distinctvalues;
		 }
		 catch(err){}
     }

     // Write a function that logs the numbers from 1 to 100 to the console.
     // For multiples of three print "Fizz" instead of the number.
     // For multiples of five print "Buzz".
     // For numbers which are multiples of both three and five print "FizzBuzz".
     function doFizzBuzz() {
         for(i = 1;i<=100;i++)
		 {			
			if(i % 3 == 0 && i % 5 == 0)
				document.write("FizzBuzz" + "<br/>");
			else if(i % 3 ==0 )
				document.write("Fizz" + "<br/>");
			else if(i % 5 == 0)
				document.write("Buzz" + "<br/>");				
			else
				document.write(i + "<br/>");
		 }
     }

     // You have a master array of strings, where each element is a fruit name.
     // You have a second array of fruit name strings, that is a list of fruits that should be removed from the fruits specified in the master array.
     // For the purpose of the exercise, we will call the master array fruits and the second array fruitsToRemove.
     // Write the function that will remove the values contained in fruitsToRemove from the array fruits.
     function removeFruits(fruits, fruitsToRemove) {
		try{
			 fruitstemp = fruits;
			 fruits = new Array();
			 for(i = 0;i<fruitstemp.length;i++)
			 {
				for(j=0;j<fruitsToRemove.length;j++)
					if(fruitstemp[i] == fruitsToRemove[j])					
						break;
				if(j == fruitsToRemove.length)
					fruits.push(fruitstemp[i]);
			}
			return fruits;
		}
		catch(err){}
					
     }

     // Write a function to push either a simple value or an array of values onto a specified array.
     // For the purpose of the exercise, we will call the target array simply array and the stuff to push onto it (either a simple value or array) simply toPush.
     // If toPush is a simple value, it should be pushed onto array as an element.
     // If toPush is an array, all of its elements should be pushed onto array. Your solution should modify array (ie. not return a new array).
     function pushOntoArray(array, toPush) {
         try{
			if(toPush.length == undefined)
				array.push(toPush);
			else
				for(i = 0; i < toPush.length ; i++)
					array.push(toPush[i]);
			return array;
		 }
		 catch(err)
		 {}
     }

     // Given a string, sourceStr, write some code that will split this string using comma as your delimiter, and producing an empty array if the string is empty.
     function splitListStrUsingComma(sourceStr) {
		sourceStrArray = new Array();
		if(sourceStr != '')
			sourceStrArray = sourceStr.split(",");
		 return sourceStrArray;
     }

     // Write a function that will take any number of arguments and return their sum
     function sum() {
			sum = 0;
			for(i = 0;i<arguments.length;i++)
				sum += arguments[i];
			return sum;
     }

     // Write a function that will return true if a specified string consists of only whitespace.
     function isOnlyWhitespace(sourceStr) {
         return (sourceStr.split(" ").length == sourceStr.length + 1 && sourceStr != "" ? true:false);
     }

     // write an example of a javascript closure
	function foo(x) {
	  var tmp = 3;
	  return function (y) {
		return (x + y + (++tmp));
	  }
	}

     // define a json object that represents a collection of people.
     // each person should have the following properties
     // - first name
     // - last name
     // - city
     // - state
     // - zip
     // - a collection of phone numbers (home, work, mobile)
	var JSONObj = {"people": [
			{"firstname": "sss", "lastname": "jjj", "city":"sefsfe", "state":"NJ","zip":"44",
				"phonenumbers":["123456", "2324232","234242423"],							
			},
			{"firstname": "ewf", "lastname": "sdf", "city":"wad", "state":"NJ","zip":"44",
				"phonenumbers":["123456", "2324232","234242423"]							
			},
			
			{"firstname": "as", "lastname": "sdfsf", "city":"ewf", "state":"NJ","zip":"44",
				"phonenumbers":["123456", "2324232","234242423"]							
			}
			
			]
		};

     // Create a javascript object (DataTable) with the following:
     // A private columns property (string array)
     // A private rows property (string array)
     // A public method addRows that adds an item to the rows array
     // A public method addColumns that adds an item to the columns array
     // A public method getData that returns the a json object representation of the DataTable
     // Note: the row object should be a hash of the column name and row item value
     // Example:
     // .addColumns('column1', 'column2', 'column3');
     // .addRow('value1A', 'value1B', 'value1C');
     // .addRow('value2A', 'value2B', 'value2C');
	 var RowCol = {
		columns : [],
		rows : [],
		addRows: function(){
			newrow = new Array();
			for(i=0;i<arguments.length;i++)
			{
				newrow.push(arguments[i]);
			}
			this.rows.push(newrow);
		},
		addColumns: function(){
			for(i=0;i<arguments.length;i++)
			{
				this.columns.push(arguments[i]);
			}
		},
		getData: function(){
			var jsondata = "[";
			for(i=0;i<this.rows.length;i++)
			{
				jsondata += "{";
				for(j = 0;j<this.columns.length;j++)
				{
					jsondata += "'" + this.columns[j] + "':'" + this.rows[i][j] + "', " ;
				}
				jsondata += "}, ";
			}
			jsondata += "]";
			return jsondata;
		},
	 }
     // within div1, programatically create a
     // SELECT element (with multiple items) and a button.
     // when the button is clicked write out the name and value of the selected item to the console.
	function DoThisSelect()
	{		
		$("#div1").append("<select id='div1select'><option value='xxx'>xxx</option><option value='yyy'>yyy</option><option value='zzz'>zzz</option></select><input type='button' value='click' id='btnSelectClick'/>");
		$("#btnSelectClick").on("click",function(){
			document.write($("#div1select").val());
		});
	}
     // Write 5 different jQuery selectors to retrieve the
     // sample anchor in the markup below.
	$("a")
	$(".link");
	$(".fizz>a").eq(0)
	$(".fizz").find("a").eq(0)
	$("#foo.bar").find("a").eq(0);
	$("a.link");
     // Programatically create an array with 5 items.  Create a list item for each item in the array
     // and add the list items to the unordered list with an id of "list1".
	function AddItemstoList()
	{	
		itemlist = ["Jan","Feb","Mar","Apr","May"];
		for(i = 0;i<itemlist.length;i++)
			$("#list1").append("<li>" + itemlist[i] + "</li>");
	}
     // Use javascript to add a list of checkboxes and 2 links
     // to the div with an id of "foobar"
     // When the first link is clicked, all the checkboxes should be checked (i.e. check all)
     // When the second link is clicked, all the checkboxes should be unchecked (i.e. uncheck all)
	function DoThisChecksandLinks()
	{
		itemlist = ["Jan","Feb","Mar","Apr","May"];
		for(i = 0;i<itemlist.length;i++)
			$("#foobar").append("<input type='checkbox' class='chkBox' value='" + itemlist[i] + "'>" + itemlist[i]+ "</input><br/>");
		$("#foobar").append("<a id='CheckAll' style='color:blue;cursor:pointer;'><u>Check All</u></a><br/>");
		$("#foobar").append("<a id='UnCheckAll' style='color:blue;cursor:pointer'><u>UnCheck All</u></a><br/>");
		$("a#CheckAll").on("click",function(){
			$(".chkBox").each(function(){
				$(this).attr("checked","checked");
			});			
		});
		$("a#UnCheckAll").on("click",function(){
			$(".chkBox").each(function(){
				$(this).removeAttr("checked","checked");
			});			
		});
	}
